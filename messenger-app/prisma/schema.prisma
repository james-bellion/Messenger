generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  name            String?
  email           String?  @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  conversations Conversation[] @relation("UserConversations")
  seenMessages  Message[] @relation("SeenMessages")

  accounts Account[]
  messages Message[]
}

model Account {
  id              Int     @id @default(autoincrement())
  userId          Int
  type            String
  provider        String
  providerAccountId String
  refresh_token   String?
  access_token    String?
  expires_at      Int?
  token_type      String?
  scope           String?
  id_token        String?
  session_state   String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Conversation {
  id              Int     @id @default(autoincrement())
  createdAt       DateTime @default(now())
  lastMessageAt   DateTime @default(now())
  name            String?
  isGroup         Boolean?

  participants User[] @relation("UserConversations")
  messages Message[]
}

model Message {
  id              Int     @id @default(autoincrement())
  body            String?
  image           String?
  createdAt       DateTime @default(now())

  seenByUsers User[] @relation("SeenMessages")

  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId       Int
  sender         User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}


// User Table:
// This table stores user information.
// Each user can have multiple conversations and seen messages.
// Users are connected to conversations through the "UserConversations" relation.
// Users are connected to seen messages through the "SeenMessages" relation.
// Users can have multiple accounts and messages.

// Account Table:
// This table stores account information associated with users.
// Each account belongs to a user.
// The userId field connects an account to the corresponding user.
// Accounts have attributes like type, provider, and tokens for authentication.

// Conversation Table:
// This table represents conversations between users.
// Conversations can involve multiple participants, represented by the "participants" relation.
// Each conversation can have multiple messages.
// The createdAt and lastMessageAt fields track conversation timestamps.

// Message Table:
// This table stores messages exchanged in conversations.
// Each message belongs to a conversation and a sender (user).
// Messages can be marked as seen by multiple users, connected through the "SeenMessages" relation.
// The conversationId field links messages to their corresponding conversation.
// The senderId field connects messages to their sender (user).



// personal notes:

// 1.) run: npx prism init 
// to get the prisma schema file

//  2.)make your tables and relations

// 3.) run:npx prisma db push
// to sync your database with prisma schema & genarate prisma cliant. 
//
// 4.) run:
//      npx prisma studio 
//            to see the data localy.

// do i migrate?? i didnt yet.
