// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// **--MongoDb , Prisma SetUp--**

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// **Models dev Notes
// 0.) Models : User, Account, Conversation & Message
//
// 1.) id that we will use in all our models 
// 2.) id is a type of string with special decorator @id
// 3.) defualt value of auto and map it to _id because thats whats under the hood of prisma 
// using mongo db the ids being with an underscore _ so we map our id to that
// 4.)  added ? optional for some due to the social log in options and you dont need them for that
//
// 5.) conversations Conversations[]
//  will have a property in this user model which maps our conversation[] model as 
// an array using the conversationsIds to refer to the id of that given conversation
//
// 6.) seen messages works the same way as above



model User {
  // Base info
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations properties
  conversationIds String[] @db.ObjectId // store convos this user is apart of
  conversations Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[] @db.ObjectId
  seenMessages Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  accounts Account[]
  messages Message[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String // need the @db.String as usualy in SQL its db.Text but mongodb uses db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

 // mapping this user model to the Accounts > userID, refering to the User model: User > id
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

// define a rule our account model that the combination of provider & providerAccountId need to be unique
  @@unique([provider, providerAccountId])
}

model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name String?
  isGroup Boolean?

  messagesIds String[] @db.ObjectId
  message Message[]

  userIds String[] @db.ObjectId
  users User[] @relation(fields: [userIds], references: [id])
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String?
  image String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen User[] @relation("Seen", fields: [seenIds], references: [id])

  // each message needs to have a relation with the conversation
  conversationId String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
